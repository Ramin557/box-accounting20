1. Text Readability Issue in Dark Mode (White Text on White Background)
Problem Description: As seen in the dark mode screenshot, the text typed or displayed within the input fields (like "نام محصول", "کد محصول", "واحد اندازه‌گیری") and the dropdown menu ("دسته بندی") appears white on a white background, making it unreadable or very difficult to see. This issue is not present in light mode.

Reason: When dark mode is activated, you likely set the global color (text color) to white or a very light color (e.g., for body or * elements). However, for specific elements like input, textarea, and select, their default background-color might still be white (or light), or you might have explicitly set it to white, leading to the conflict of white text on a white background.

Solution: You need to explicitly target input, textarea, and select elements in your CSS when dark mode is active and set their color (text color) to a darker color, or alternatively, change their background-color to a dark color to match the dark theme.

Assumption: I'll assume you apply a class like dark-mode to your body or html element to activate dark mode styles.

Proposed CSS Code:

CSS

/* --- Fix for Text Visibility in Dark Mode Input/Select Fields --- */

/* Option 1: Keep input backgrounds white, but change text to dark (less consistent with dark theme) */
body.dark-mode input[type="text"],
body.dark-mode input[type="number"],
body.dark-mode textarea,
body.dark-mode select {
    color: #333; /* Set text color to a dark grey */
    /* background-color: #fff; /* Optional: explicitly keep white background */
}

/* Option 2 (Recommended for better dark mode consistency): Make input backgrounds dark with light text */
body.dark-mode input[type="text"],
body.dark-mode input[type="number"],
body.dark-mode textarea,
body.dark-mode select {
    background-color: #444; /* Dark background for input fields */
    color: #eee; /* Light text color for contrast */
    border: 1px solid #777; /* Adjust border color for dark theme */
}

/* Important: Adjust placeholder text color for better visibility in dark mode */
body.dark-mode input::placeholder,
body.dark-mode textarea::placeholder {
    color: #bbb; /* A lighter grey for placeholder text */
}

/* Ensure options within the dropdown also have proper colors in dark mode */
body.dark-mode select option {
    background-color: #444; /* Dark background for dropdown options */
    color: #eee; /* Light text color for dropdown options */
}
How to apply: Add these CSS rules to your main CSS file, or your specific dark mode CSS file. Ensure these rules are declared after any general input, textarea, select rules, so they can override them when dark-mode is active.

2. Enhancing the Select Dropdown - Modern, Beautiful, and with Edit/Delete/Add Capabilities
Problem Description: The current "Category" dropdown is a standard HTML <select> element. It has a basic appearance and lacks advanced functionalities such as searching, adding new items, or inline editing/deleting of existing items.

Solution: To achieve a modern, interactive, and customizable dropdown with search, add, edit, and delete functionalities, you'll need to use a JavaScript library. Native HTML <select> elements do not offer these advanced features directly.

Recommended Libraries:

Select2: A very popular and mature library providing search, multiple selection, and tagging (adding new items).
Chosen: Similar to Select2, offers comparable features.
Tom-select: A newer, lightweight, and highly customizable option.
Implementation Example (using Select2, as it's common for tagging/adding):

Include Select2 Files: You need to add Select2's CSS and JavaScript files to your HTML. You can use a CDN or download them.

HTML

<!-- Add this to your <head> section -->
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />

<!-- Add these scripts before the closing </body> tag -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script> <!-- Select2 requires jQuery -->
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
Initialize Select2 on Your <select> Element: In your main JavaScript file (e.g., script.js):

JavaScript

$(document).ready(function() {
    // First, ensure your HTML <select> element has an ID, e.g., id="category-select"
    // <select id="category-select" class="form-control">...</select>

    $('#category-select').select2({
        placeholder: "Select or add a new category...", // Text when nothing is selected
        allowClear: true, // Allows user to clear the selected item
        tags: true,      // This is crucial: allows user to type new values not in the list
        tokenSeparators: [',', ' '], // If you want to add multiple new tags separated by comma or space
        // You can add more options here, like minimumInputLength for search
        // minimumInputLength: 2, // Start searching after 2 characters
    });

    // If you want to load categories dynamically from your backend API:
    /*
    $('#category-select').select2({
        ajax: {
            url: '/api/categories', // Your API endpoint to fetch categories
            dataType: 'json',
            delay: 250, // Delay in milliseconds before request is sent
            data: function (params) {
                return {
                    q: params.term, // search term
                    page: params.page
                };
            },
            processResults: function (data) {
                // Map your API response to Select2's expected format {id: ..., text: ...}
                return {
                    results: data.map(function(item) {
                        return {
                            id: item.id,   // Value for the <option>
                            text: item.name // Display text for the <option>
                        };
                    })
                };
            },
            cache: true
        },
        tags: true // Still allows adding new categories even if loaded dynamically
    });
    */
});
Important: You must give your <select> tag an appropriate id (e.g., id="category-select") in your HTML for the JavaScript to target it.

Implementing Edit and Delete Functionality:

Adding New Items (tags: true in Select2): With tags: true, if a user types something that isn't in the existing list, Select2 will treat it as a new item. You'll then need JavaScript code to capture this new item when the form is submitted and send it to your backend to be saved in your database.
Editing and Deleting Existing Items: Inline editing or deleting directly within the dropdown itself is generally not how these libraries work. The best and most common approach is to:
Have a separate "Category Management" page or a modal/popup within your application.
On this page, display a list of all existing categories (fetched from your database).
Provide "Edit" and "Delete" buttons next to each category in this list.
When a category is edited or deleted, your JavaScript code would send an API request to your backend to update or remove it from the database.
After a change (add, edit, delete), you would then refresh the data in your Select2 dropdown (e.g., by re-initializing it or refetching data from your API) so it reflects the latest list of categories from your database.
Example UI idea for Category Management (simplified HTML - this would need backend logic):

HTML

<!-- This would be on a separate page or within a modal/popup -->
<h3>Category Management</h3>
<input type="text" id="newCategoryInput" placeholder="New category name">
<button onclick="addCategory()">Add Category</button>

<ul id="categoryList">
    <!-- Categories would be loaded here from your database -->
    <li>Box Type Small <button onclick="editCategory('id123')">Edit</button> <button onclick="deleteCategory('id123')">Delete</button></li>
    <li>Box Type Medium <button onclick="editCategory('id456')">Edit</button> <button onclick="deleteCategory('id456')">Delete</button></li>
    <!-- ... more categories ... -->
</ul>
You would then write JavaScript functions (addCategory(), editCategory(), deleteCategory()) to interact with your backend API.

